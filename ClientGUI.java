/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package BulletinBoardGUI;

import java.awt.Color;
import java.util.HashMap;

/**
 *
 * @author USER 1
 */
public class ClientGUI extends javax.swing.JFrame {

    private HashMap<String, String> commandTips;
    
    private void connect(String IPAddress, int port) {
        // TODO: Complete connect function
    }
    
    
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        initComponents();
        commandTips = new HashMap<String, String>();
        commandTips.put("GET", "PINS or color=color contains=x y refersTo=string");
        commandTips.put("POST", "x y width height color message");
        commandTips.put("PIN", "x y");
        commandTips.put("UNPIN", "x y");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IPLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        IPTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        errorMessageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientTerminal = new javax.swing.JTextArea();
        clientMessageTextField = new javax.swing.JTextField();
        sendMessageButton = new javax.swing.JButton();
        commandSelection = new javax.swing.JComboBox<>();
        argumentDescriptorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bulletin Board");

        IPLabel.setText("IP Address");

        portLabel.setText("Port");

        connectButton.setText("Connect");
        connectButton.setToolTipText("Connect to a server.");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        errorMessageLabel.setEnabled(false);

        clientTerminal.setEditable(false);
        clientTerminal.setColumns(20);
        clientTerminal.setRows(5);
        jScrollPane1.setViewportView(clientTerminal);
        clientTerminal.getAccessibleContext().setAccessibleName("Client Terminal");

        clientMessageTextField.setText("PINS or color=color contains=x y refersTo=string");
        clientMessageTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clientMessageTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                clientMessageTextFieldFocusLost(evt);
            }
        });

        sendMessageButton.setText("Send");

        commandSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GET", "POST", "PIN", "UNPIN", "SHAKE", "CLEAR", "DISCONNECT" }));
        commandSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                commandSelectionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(errorMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(IPLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connectButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(commandSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(argumentDescriptorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clientMessageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sendMessageButton)))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IPLabel)
                    .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMessageLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendMessageButton)
                    .addComponent(commandSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(argumentDescriptorLabel)
                .addContainerGap())
        );

        errorMessageLabel.getAccessibleContext().setAccessibleName("Error Message Label");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // Get the IP and the Port from their labels
        String IPAddress = IPTextField.getText();
        int portNumber = Integer.parseInt(portTextField.getText());
        
        // Attempt a connection
        connect(IPAddress, portNumber);
    }//GEN-LAST:event_connectButtonActionPerformed

    private void commandSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_commandSelectionItemStateChanged
        // Check that a new item was selected
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String item = (String) evt.getItem();
            //System.out.println("Selected Item: " + item);
            
            // Set the placeholder text to include the argument format for the 
            // selected item
            if (commandTips.containsKey(item)) {
                clientMessageTextField.setText(commandTips.get(item));
                clientMessageTextField.setEditable(true);
                clientMessageTextField.setBackground(Color.WHITE);
            } else {
                // CLEAR, SHAKE, DISCONNECT do not take args, so make 
                // the messageField uneditable
                clientMessageTextField.setText("");
                clientMessageTextField.setEditable(false);
                clientMessageTextField.setBackground(Color.DARK_GRAY);
            }
        }
    }//GEN-LAST:event_commandSelectionItemStateChanged

    private void clientMessageTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clientMessageTextFieldFocusGained
        // Check to see if some of the placeholder text is still here
        String text = clientMessageTextField.getText();
        if (commandTips.containsValue(text)) {
            // Placeholder text present, clear the text for User-defined text
            clientMessageTextField.setText("");
            clientMessageTextField.setCaretPosition(0);
        }
    }//GEN-LAST:event_clientMessageTextFieldFocusGained

    private void clientMessageTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clientMessageTextFieldFocusLost
        // Check to see if we can put the placeholder text back
        String text = clientMessageTextField.getText();
        String currentCommand = (String) commandSelection.getSelectedItem();
        String placeholderText = commandTips.get(currentCommand);
        if (text.isEmpty()) {
            // No User-defined text present, good to reset
            clientMessageTextField.setCaretPosition(0);
            clientMessageTextField.setText(placeholderText);
        }
    }//GEN-LAST:event_clientMessageTextFieldFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IPLabel;
    private javax.swing.JTextField IPTextField;
    private javax.swing.JLabel argumentDescriptorLabel;
    private javax.swing.JTextField clientMessageTextField;
    private javax.swing.JTextArea clientTerminal;
    private javax.swing.JComboBox<String> commandSelection;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton sendMessageButton;
    // End of variables declaration//GEN-END:variables
}
