/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package BulletinBoardGUI;

import java.awt.Color;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.LinkedList;

/**
 *
 * @author USER 1
 */
public class ClientGUI extends javax.swing.JFrame {

    private HashMap<String, String> commandTips;
    private Socket socket;
    private LinkedList<String> messageBuffer;
    
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        initComponents();
        // Load Map with command and respective placeholder text
        commandTips = new HashMap<String, String>();
        commandTips.put("GET", "PINS or color=color contains=x y refersTo=string");
        commandTips.put("POST", "x y width height color message");
        commandTips.put("PIN", "x y");
        commandTips.put("UNPIN", "x y");
        // Create empty buffer to hold messages
        messageBuffer = new LinkedList<String>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IPLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        IPTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        errorMessageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientTerminal = new javax.swing.JTextArea();
        sendMessageButton = new javax.swing.JButton();
        commandSelection = new javax.swing.JComboBox<>();
        argumentDescriptorLabel = new javax.swing.JLabel();
        argOption1TextField = new javax.swing.JTextField();
        argOption1Label = new javax.swing.JLabel();
        argOption2Label = new javax.swing.JLabel();
        xTextField = new javax.swing.JTextField();
        yTextField = new javax.swing.JTextField();
        pinsToggle = new javax.swing.JToggleButton();
        argOption3Label = new javax.swing.JLabel();
        referstoTextField = new javax.swing.JTextField();
        wTextField = new javax.swing.JTextField();
        hTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bulletin Board");

        IPLabel.setLabelFor(IPTextField);
        IPLabel.setText("IP Address");

        portLabel.setLabelFor(portTextField);
        portLabel.setText("Port");

        connectButton.setText("Connect");
        connectButton.setToolTipText("Connect to a server.");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        errorMessageLabel.setEnabled(false);

        clientTerminal.setEditable(false);
        clientTerminal.setColumns(20);
        clientTerminal.setRows(5);
        jScrollPane1.setViewportView(clientTerminal);
        clientTerminal.getAccessibleContext().setAccessibleName("Client Terminal");

        sendMessageButton.setText("Send");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        commandSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GET", "POST", "PIN", "UNPIN", "SHAKE", "CLEAR", "DISCONNECT" }));
        commandSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                commandSelectionItemStateChanged(evt);
            }
        });

        argOption1TextField.setText("color");

        argOption1Label.setLabelFor(argOption1Label);
        argOption1Label.setText("Color");

        argOption2Label.setText("Contains");

        xTextField.setText("x");

        yTextField.setText("y");

        pinsToggle.setText("Get All Pins");

        argOption3Label.setLabelFor(argOption3Label);
        argOption3Label.setText("Refers To");

        referstoTextField.setText("refers to");

        wTextField.setText("w");

        hTextField.setText("h");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(errorMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(IPLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connectButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(commandSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(argOption1Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(argOption1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pinsToggle))
                                    .addComponent(argumentDescriptorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sendMessageButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(argOption2Label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(xTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(yTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(4, 4, 4)
                                    .addComponent(hTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(argOption3Label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(referstoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IPLabel)
                    .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMessageLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendMessageButton)
                    .addComponent(commandSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(argOption1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(argOption1Label)
                    .addComponent(pinsToggle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(argOption2Label)
                    .addComponent(xTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(argumentDescriptorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(argOption3Label)
                    .addComponent(referstoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        errorMessageLabel.getAccessibleContext().setAccessibleName("Error Message Label");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // Get the IP and the Port from their labels
        String IPAddress = IPTextField.getText();
        int portNumber = Integer.parseInt(portTextField.getText());
        
        // Attempt a connection
        connect(IPAddress, portNumber);
    }//GEN-LAST:event_connectButtonActionPerformed

    private void commandSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_commandSelectionItemStateChanged
        // Check that a new item was selected
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String item = (String) evt.getItem();
            //System.out.println("Selected Item: " + item);
            
            // Reset the GUI components required
            if (item.equals("GET")) {
                argOption1Label.setVisible(true);
                argOption1Label.setText("Color");
                argOption2Label.setVisible(true);
                argOption2Label.setText("Contains");
                argOption3Label.setVisible(true);
                argOption3Label.setText("Refers To");
                pinsToggle.setVisible(true);
            } else if (item.equals("POST")) {
                argOption2Label.setText("Coords");
                argOption3Label.setText("Message");
            } else if (item.equals("PIN") || item.equals("UNPIN")) {
                
            } else {
            
            }
            /*
            // Set the placeholder text to include the argument format for the 
            // selected item
            if (commandTips.containsKey(item)) {
                clientMessageTextField.setText(commandTips.get(item));
                clientMessageTextField.setEditable(true);
                clientMessageTextField.setBackground(Color.WHITE);
            } else {
                // CLEAR, SHAKE, DISCONNECT do not take args, so make 
                // the messageField uneditable
                clientMessageTextField.setText("");
                clientMessageTextField.setEditable(false);
                clientMessageTextField.setBackground(Color.DARK_GRAY);
            }
            */
        }
    }//GEN-LAST:event_commandSelectionItemStateChanged

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        if (evt.getActionCommand().equals("Send")) {
            String command = (String) commandSelection.getSelectedItem();
            String message = "";
            
            if (command.equals("GET")) {
                String color = argOption1TextField.getText().equals("color") ? "" : argOption1TextField.getText();
                int x = 
                        xTextField.getText().equals("x") || xTextField.getText().isBlank() 
                        ? -1 
                        : Integer.parseInt(xTextField.getText());
                int y = yTextField.getText().equals("y") || yTextField.getText().isBlank() 
                        ? -1 
                        : Integer.parseInt(yTextField.getText());
                String content = referstoTextField.getText();
            } else if (command.equals("POST")) {
                String color = argOption1TextField.getText().equals("color") ? "" : argOption1TextField.getText();
                int x = 
                        xTextField.getText().equals("x") || xTextField.getText().isBlank() 
                        ? -1 
                        : Integer.parseInt(xTextField.getText());
                int y = yTextField.getText().equals("y") || yTextField.getText().isBlank() 
                        ? -1 
                        : Integer.parseInt(yTextField.getText());
                int w = wTextField.getText().equals("y") || wTextField.getText().isBlank() 
                        ? -1 
                        : Integer.parseInt(wTextField.getText());
                int h = hTextField.getText().equals("y") || hTextField.getText().isBlank() 
                        ? -1 
                        : Integer.parseInt(hTextField.getText());
                String content = referstoTextField.getText();
            } else if (command.equals("PIN") || command.equals("UNPIN")) {
                
            }
            
            String color = argOption1TextField.getText().equals("color") ? "" : argOption1TextField.getText();
            int x = 
                    xTextField.getText().equals("x") || xTextField.getText().isBlank() 
                    ? -1 
                    : Integer.parseInt(xTextField.getText());
            int y = yTextField.getText().equals("y") || yTextField.getText().isBlank() 
                    ? -1 
                    : Integer.parseInt(yTextField.getText());
            int w = wTextField.getText().equals("y") || wTextField.getText().isBlank() 
                    ? -1 
                    : Integer.parseInt(wTextField.getText());
            int h = hTextField.getText().equals("y") || hTextField.getText().isBlank() 
                    ? -1 
                    : Integer.parseInt(hTextField.getText());
            String content = referstoTextField.getText();
            
            
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void connect(String IPAddress, int port) {
        try {
            socket = new Socket(IPAddress, port);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void receiveMessage(String message) {
        messageBuffer.add(message);
        clientTerminal.append(message+"\n");
    }
    
    private void sendMessage(String command, String args) {
        // Send message to server
        String message = command + " " + args;
        // TODO: Actually send the message to the server
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IPLabel;
    private javax.swing.JTextField IPTextField;
    private javax.swing.JLabel argOption1Label;
    private javax.swing.JTextField argOption1TextField;
    private javax.swing.JLabel argOption2Label;
    private javax.swing.JLabel argOption3Label;
    private javax.swing.JLabel argumentDescriptorLabel;
    private javax.swing.JTextArea clientTerminal;
    private javax.swing.JComboBox<String> commandSelection;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JTextField hTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton pinsToggle;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JTextField referstoTextField;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JTextField wTextField;
    private javax.swing.JTextField xTextField;
    private javax.swing.JTextField yTextField;
    // End of variables declaration//GEN-END:variables
}
